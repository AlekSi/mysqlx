// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mysqlx_expect.proto

/*
	Package mysqlx_expect is a generated protocol buffer package.

	Expect operations

	It is generated from these files:
		mysqlx_expect.proto

	It has these top-level messages:
		Open
		Close
*/
package mysqlx_expect

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/AlekSi/mysqlx/internal/proto/mysqlx"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Open_CtxOperation int32

const (
	// copy the operations from the parent Expect-block
	Open_EXPECT_CTX_COPY_PREV Open_CtxOperation = 0
	// start with a empty set of operations
	Open_EXPECT_CTX_EMPTY Open_CtxOperation = 1
)

var Open_CtxOperation_name = map[int32]string{
	0: "EXPECT_CTX_COPY_PREV",
	1: "EXPECT_CTX_EMPTY",
}
var Open_CtxOperation_value = map[string]int32{
	"EXPECT_CTX_COPY_PREV": 0,
	"EXPECT_CTX_EMPTY":     1,
}

func (x Open_CtxOperation) Enum() *Open_CtxOperation {
	p := new(Open_CtxOperation)
	*p = x
	return p
}
func (x Open_CtxOperation) String() string {
	return proto.EnumName(Open_CtxOperation_name, int32(x))
}
func (x *Open_CtxOperation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Open_CtxOperation_value, data, "Open_CtxOperation")
	if err != nil {
		return err
	}
	*x = Open_CtxOperation(value)
	return nil
}
func (Open_CtxOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMysqlxExpect, []int{0, 0}
}

type Open_Condition_Key int32

const (
	// Change error propagation behaviour
	Open_Condition_EXPECT_NO_ERROR Open_Condition_Key = 1
	// Check if X Protocol field exists
	Open_Condition_EXPECT_FIELD_EXIST Open_Condition_Key = 2
)

var Open_Condition_Key_name = map[int32]string{
	1: "EXPECT_NO_ERROR",
	2: "EXPECT_FIELD_EXIST",
}
var Open_Condition_Key_value = map[string]int32{
	"EXPECT_NO_ERROR":    1,
	"EXPECT_FIELD_EXIST": 2,
}

func (x Open_Condition_Key) Enum() *Open_Condition_Key {
	p := new(Open_Condition_Key)
	*p = x
	return p
}
func (x Open_Condition_Key) String() string {
	return proto.EnumName(Open_Condition_Key_name, int32(x))
}
func (x *Open_Condition_Key) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Open_Condition_Key_value, data, "Open_Condition_Key")
	if err != nil {
		return err
	}
	*x = Open_Condition_Key(value)
	return nil
}
func (Open_Condition_Key) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMysqlxExpect, []int{0, 0, 0}
}

type Open_Condition_ConditionOperation int32

const (
	// set the condition
	//
	// set, if not set
	// overwrite, if set
	Open_Condition_EXPECT_OP_SET Open_Condition_ConditionOperation = 0
	// unset the condition
	Open_Condition_EXPECT_OP_UNSET Open_Condition_ConditionOperation = 1
)

var Open_Condition_ConditionOperation_name = map[int32]string{
	0: "EXPECT_OP_SET",
	1: "EXPECT_OP_UNSET",
}
var Open_Condition_ConditionOperation_value = map[string]int32{
	"EXPECT_OP_SET":   0,
	"EXPECT_OP_UNSET": 1,
}

func (x Open_Condition_ConditionOperation) Enum() *Open_Condition_ConditionOperation {
	p := new(Open_Condition_ConditionOperation)
	*p = x
	return p
}
func (x Open_Condition_ConditionOperation) String() string {
	return proto.EnumName(Open_Condition_ConditionOperation_name, int32(x))
}
func (x *Open_Condition_ConditionOperation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Open_Condition_ConditionOperation_value, data, "Open_Condition_ConditionOperation")
	if err != nil {
		return err
	}
	*x = Open_Condition_ConditionOperation(value)
	return nil
}
func (Open_Condition_ConditionOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMysqlxExpect, []int{0, 0, 1}
}

// open an Expect block and set/unset the conditions that have to be fulfilled
//
// if any of the conditions fail, all enclosed messages will fail with
// a Mysqlx.Error message.
//
// :returns: :protobuf:msg:`Mysqlx::Ok` on success, :protobuf:msg:`Mysqlx::Error` on error
//
type Open struct {
	Op               *Open_CtxOperation `protobuf:"varint,1,opt,name=op,enum=Mysqlx.Expect.Open_CtxOperation,def=0" json:"op,omitempty"`
	Cond             []*Open_Condition  `protobuf:"bytes,2,rep,name=cond" json:"cond,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *Open) Reset()                    { *m = Open{} }
func (m *Open) String() string            { return proto.CompactTextString(m) }
func (*Open) ProtoMessage()               {}
func (*Open) Descriptor() ([]byte, []int) { return fileDescriptorMysqlxExpect, []int{0} }

const Default_Open_Op Open_CtxOperation = Open_EXPECT_CTX_COPY_PREV

func (m *Open) GetOp() Open_CtxOperation {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return Default_Open_Op
}

func (m *Open) GetCond() []*Open_Condition {
	if m != nil {
		return m.Cond
	}
	return nil
}

type Open_Condition struct {
	ConditionKey     *uint32                            `protobuf:"varint,1,req,name=condition_key,json=conditionKey" json:"condition_key,omitempty"`
	ConditionValue   []byte                             `protobuf:"bytes,2,opt,name=condition_value,json=conditionValue" json:"condition_value,omitempty"`
	Op               *Open_Condition_ConditionOperation `protobuf:"varint,3,opt,name=op,enum=Mysqlx.Expect.Open_Condition_ConditionOperation,def=0" json:"op,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *Open_Condition) Reset()                    { *m = Open_Condition{} }
func (m *Open_Condition) String() string            { return proto.CompactTextString(m) }
func (*Open_Condition) ProtoMessage()               {}
func (*Open_Condition) Descriptor() ([]byte, []int) { return fileDescriptorMysqlxExpect, []int{0, 0} }

const Default_Open_Condition_Op Open_Condition_ConditionOperation = Open_Condition_EXPECT_OP_SET

func (m *Open_Condition) GetConditionKey() uint32 {
	if m != nil && m.ConditionKey != nil {
		return *m.ConditionKey
	}
	return 0
}

func (m *Open_Condition) GetConditionValue() []byte {
	if m != nil {
		return m.ConditionValue
	}
	return nil
}

func (m *Open_Condition) GetOp() Open_Condition_ConditionOperation {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return Default_Open_Condition_Op
}

// close a Expect block
//
// closing a Expect block restores the state of the previous Expect block
// for the following messages
//
// :returns: :protobuf:msg:`Mysqlx::Ok` on success, :protobuf:msg:`Mysqlx::Error` on error
type Close struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Close) Reset()                    { *m = Close{} }
func (m *Close) String() string            { return proto.CompactTextString(m) }
func (*Close) ProtoMessage()               {}
func (*Close) Descriptor() ([]byte, []int) { return fileDescriptorMysqlxExpect, []int{1} }

func init() {
	proto.RegisterType((*Open)(nil), "Mysqlx.Expect.Open")
	proto.RegisterType((*Open_Condition)(nil), "Mysqlx.Expect.Open.Condition")
	proto.RegisterType((*Close)(nil), "Mysqlx.Expect.Close")
	proto.RegisterEnum("Mysqlx.Expect.Open_CtxOperation", Open_CtxOperation_name, Open_CtxOperation_value)
	proto.RegisterEnum("Mysqlx.Expect.Open_Condition_Key", Open_Condition_Key_name, Open_Condition_Key_value)
	proto.RegisterEnum("Mysqlx.Expect.Open_Condition_ConditionOperation", Open_Condition_ConditionOperation_name, Open_Condition_ConditionOperation_value)
}
func (m *Open) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Open) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMysqlxExpect(dAtA, i, uint64(*m.Op))
	}
	if len(m.Cond) > 0 {
		for _, msg := range m.Cond {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMysqlxExpect(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Open_Condition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Open_Condition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConditionKey == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMysqlxExpect(dAtA, i, uint64(*m.ConditionKey))
	}
	if m.ConditionValue != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMysqlxExpect(dAtA, i, uint64(len(m.ConditionValue)))
		i += copy(dAtA[i:], m.ConditionValue)
	}
	if m.Op != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMysqlxExpect(dAtA, i, uint64(*m.Op))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Close) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Close) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMysqlxExpect(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Open) Size() (n int) {
	var l int
	_ = l
	if m.Op != nil {
		n += 1 + sovMysqlxExpect(uint64(*m.Op))
	}
	if len(m.Cond) > 0 {
		for _, e := range m.Cond {
			l = e.Size()
			n += 1 + l + sovMysqlxExpect(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Open_Condition) Size() (n int) {
	var l int
	_ = l
	if m.ConditionKey != nil {
		n += 1 + sovMysqlxExpect(uint64(*m.ConditionKey))
	}
	if m.ConditionValue != nil {
		l = len(m.ConditionValue)
		n += 1 + l + sovMysqlxExpect(uint64(l))
	}
	if m.Op != nil {
		n += 1 + sovMysqlxExpect(uint64(*m.Op))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Close) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMysqlxExpect(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMysqlxExpect(x uint64) (n int) {
	return sovMysqlxExpect(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Open) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMysqlxExpect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Open: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Open: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var v Open_CtxOperation
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysqlxExpect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Open_CtxOperation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Op = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysqlxExpect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMysqlxExpect
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cond = append(m.Cond, &Open_Condition{})
			if err := m.Cond[len(m.Cond)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMysqlxExpect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMysqlxExpect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Open_Condition) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMysqlxExpect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Condition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Condition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionKey", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysqlxExpect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConditionKey = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysqlxExpect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMysqlxExpect
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConditionValue = append(m.ConditionValue[:0], dAtA[iNdEx:postIndex]...)
			if m.ConditionValue == nil {
				m.ConditionValue = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var v Open_Condition_ConditionOperation
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMysqlxExpect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Open_Condition_ConditionOperation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Op = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMysqlxExpect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMysqlxExpect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Close) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMysqlxExpect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Close: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Close: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMysqlxExpect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMysqlxExpect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMysqlxExpect(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMysqlxExpect
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMysqlxExpect
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMysqlxExpect
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMysqlxExpect
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMysqlxExpect
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMysqlxExpect(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMysqlxExpect = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMysqlxExpect   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mysqlx_expect.proto", fileDescriptorMysqlxExpect) }

var fileDescriptorMysqlxExpect = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0xee, 0xd2, 0x40,
	0x14, 0xc5, 0x99, 0x16, 0x17, 0x5e, 0xdb, 0x3f, 0x75, 0x20, 0x5a, 0x49, 0x6c, 0x9a, 0xba, 0xb0,
	0x6e, 0x26, 0xc8, 0x92, 0x18, 0x17, 0xd6, 0x21, 0x21, 0x0a, 0xd3, 0x0c, 0x95, 0xc0, 0x6a, 0x82,
	0x65, 0x4c, 0x50, 0xe8, 0x54, 0x28, 0x06, 0xde, 0xc0, 0x47, 0x70, 0xe1, 0x03, 0xb9, 0xf4, 0x11,
	0x0c, 0x26, 0x2e, 0x7c, 0x0a, 0xd3, 0x52, 0xf9, 0x88, 0xc4, 0xdd, 0xdc, 0xdf, 0x3d, 0x73, 0x72,
	0xcf, 0xcd, 0x85, 0xfa, 0x72, 0xb7, 0xfe, 0xb8, 0xd8, 0x0a, 0xb9, 0x4d, 0x65, 0x9c, 0x91, 0x74,
	0xa5, 0x32, 0x85, 0xcd, 0x7e, 0x01, 0x09, 0x2d, 0x60, 0xd3, 0x38, 0x68, 0x0e, 0x4d, 0xef, 0x97,
	0x0e, 0x55, 0x96, 0xca, 0x04, 0x77, 0x41, 0x53, 0xa9, 0x8d, 0x5c, 0xe4, 0xdf, 0xb4, 0x5d, 0x72,
	0xf1, 0x85, 0xe4, 0x02, 0x12, 0x64, 0x5b, 0x96, 0xca, 0xd5, 0x34, 0x9b, 0xab, 0xa4, 0xd3, 0xa0,
	0xe3, 0x90, 0x06, 0x91, 0x08, 0xa2, 0xb1, 0x08, 0x58, 0x38, 0x11, 0x21, 0xa7, 0x23, 0xae, 0xa9,
	0x14, 0x3f, 0x85, 0x6a, 0xac, 0x92, 0x99, 0xad, 0xb9, 0xba, 0x7f, 0xa7, 0xfd, 0xf0, 0xaa, 0x93,
	0x4a, 0x66, 0xf3, 0xdc, 0x86, 0x17, 0xd2, 0xe6, 0x57, 0x0d, 0x6e, 0x1f, 0x19, 0x7e, 0x04, 0x66,
	0xfc, 0xb7, 0x10, 0x1f, 0xe4, 0xce, 0x46, 0xae, 0xe6, 0x9b, 0xdc, 0x38, 0xc2, 0x57, 0x72, 0x87,
	0x1f, 0x43, 0xed, 0x24, 0xfa, 0x34, 0x5d, 0x6c, 0xa4, 0xad, 0xb9, 0xc8, 0x37, 0xf8, 0xcd, 0x11,
	0x8f, 0x72, 0x8a, 0x59, 0x11, 0x4b, 0x2f, 0x62, 0xb5, 0xfe, 0x3b, 0xcc, 0xe9, 0x75, 0x8a, 0x69,
	0x96, 0x31, 0x59, 0x28, 0x86, 0x34, 0xca, 0xf3, 0x79, 0x6d, 0xd0, 0xf3, 0x01, 0xea, 0x50, 0x2b,
	0x7b, 0x03, 0x26, 0x28, 0xe7, 0x8c, 0x5b, 0x08, 0xdf, 0x03, 0x5c, 0xc2, 0x6e, 0x8f, 0xbe, 0x7e,
	0x29, 0xe8, 0xb8, 0x37, 0x8c, 0x2c, 0xcd, 0x7b, 0x06, 0xf8, 0x5f, 0x73, 0x7c, 0x17, 0x2e, 0xed,
	0xad, 0xca, 0x99, 0x2b, 0x0b, 0xc5, 0x9b, 0x41, 0x0e, 0x91, 0xf7, 0x1c, 0x8c, 0xf3, 0xdd, 0x63,
	0x1b, 0xae, 0x6e, 0xdf, 0xaa, 0xe0, 0x06, 0x58, 0x67, 0x1d, 0xda, 0x0f, 0xa3, 0x89, 0x85, 0x3a,
	0xd5, 0xcf, 0xbf, 0x5b, 0xb6, 0x67, 0xc2, 0xad, 0x60, 0xa1, 0xd6, 0xb2, 0x28, 0x1f, 0xbc, 0x78,
	0xf2, 0x6d, 0xef, 0xa0, 0xef, 0x7b, 0x07, 0xfd, 0xd8, 0x3b, 0xe8, 0xcb, 0x4f, 0xa7, 0x02, 0xf7,
	0x63, 0xb5, 0x24, 0xc5, 0x6d, 0x90, 0xf8, 0x3d, 0x29, 0xef, 0xe3, 0xed, 0xe6, 0xdd, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xe8, 0x17, 0x6f, 0xcd, 0x55, 0x02, 0x00, 0x00,
}
